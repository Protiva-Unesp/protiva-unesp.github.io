{"componentChunkName":"component---src-pages-introducao-a-programacao-markdown-remark-frontmatter-slug-tsx","path":"/introducao-a-programacao/exercicios-xiii/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"02 - Exercícios","description":"descricao","author":null},"html":"<h2>Resolução Exercícios Teoria dos Números</h2>\n<h3>Exercício B, E e F</h3>\n<h3>B - T-Primes</h3>\n<ul>\n<li>T-Primes são números positivos que tem exatamente 3 divisores distintos.</li>\n<li>Dado n inteiros, determine quando os mesmo são ou não T-primes.</li>\n<li>Entrada:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">n (1 ≤ n ≤ 10^5 )\nxi (1 ≤ xi ≤ 10^12 )</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>Como encontrar os T-Primes? Pela definição, conseguimos assumir que um número x é um T-prime, se seus divisores forem apenas: 1, (algum_numero_primo), x Por exemplo, um número primo, não é um T-prime, pois ele é divisível apenas por ele mesmo e 1.</li>\n<li>Mas qual número primo se encaixa nessa configuração?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1 &lt; (algum_numero_primo) &lt; x</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>O único número que se encaixa nessa configuração seria um número primo multiplicado por ele mesmo que gerasse x, exemplo:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Para x = 9,\n1 &lt; 3 &lt; 9</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ul>\n<li>Solução: Dado um número n:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> “NO”<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">quadrado_perfeito</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ehPrimo<span class=\"token punctuation\">[</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> “YES”<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> “NO”<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>Para x = 16, 16 é um quadrado perfeito, mas como sqrt(16) = 4 e 4 não é um número primo, ficamos no final com mais de 3 divisores: 1,2,4,8,16</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> ehPrimo<span class=\"token punctuation\">;</span>\nll MAXN <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">crivo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ehPrimo <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>MAXN <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ehPrimo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ehPrimo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> MAXN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ehPrimo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll m <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span> m <span class=\"token operator\">&lt;=</span> MAXN<span class=\"token punctuation\">;</span> m <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span>\n        ehPrimo<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>E - RSA Attack</h3>\n<ul>\n<li>\n<p>O enunciado nos apresenta o seguinte problema</p>\n<ul>\n<li>Achar um inteiro m que satisfaça a equação: m^e (mod n) = c (mod n)</li>\n<li>Onde:</li>\n<li>n é o produto de dois números primos ímpares, p e q</li>\n<li>gcd(e, (p - 1)(q - 1)) = 1</li>\n<li>e &#x3C; (p - 1)(q - 1)</li>\n<li>e, n, c &#x3C;= 32000</li>\n</ul>\n</li>\n<li>\n<p>1ª ETAPA: manipular a equação</p>\n<ul>\n<li>Precisamos encontrar o valor de m, mas, no estado atual de nossa equação, temos apenas o valor de me, logo, queremos eliminar essa potência.</li>\n</ul>\n</li>\n</ul>\n<p>me (mod n) = c (mod n)</p>\n<p>elevar ambos os lados da equação por x</p>\n<p>(me)x (mod n) = (c)x (mod n)</p>\n<p>mex (mod n) = cx (mod n)</p>\n<ul>\n<li>\n<p>Podemos, então, supor que ex = 1, pois, assim, mex = m1.</p>\n</li>\n<li>\n<p>Assim, temos: m (mod n) = cx (mod n)</p>\n</li>\n<li>\n<p>Agora, sabemos que o valor de m é o resultado da potência cx.</p>\n</li>\n<li>\n<p>Contudo, não sabemos o valor de x, portanto precisamos encontrá-lo.</p>\n</li>\n<li>\n<p>2ª ETAPA: encontrar o valor de x</p>\n<ul>\n<li>Para tal, vamos utilizar as seguintes afirmações do exercício:\n<ol>\n<li>ex = 1</li>\n<li>gcd(e, (p - 1)(q - 1)) = 1</li>\n<li>e &#x3C; (p - 1)(q - 1)</li>\n<li></li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>Podemos perceber, pelas afirmações 1 e 2, que:</p>\n</li>\n</ul>\n<p>ex = gcd(e, (p - 1)(q - 1)) = 1</p>\n<ul>\n<li>Uma equação diofantina tem o formato:</li>\n</ul>\n<p>ax + by = c</p>\n<ul>\n<li>E sabemos que podemos resolver através do algoritmo estendido de</li>\n</ul>\n<p>Euclides equações diofantinas com a seguinte configuração;</p>\n<p>ax + by = gcd(a, b) = c</p>\n<ul>\n<li>Comparando nossa equação atual com a equação diofantina geral:</li>\n</ul>\n<p>ex = gcd(e, (p - 1)(q - 1)) = 1 (I)</p>\n<p>ax + by = gcd(a, b) = c (II)</p>\n<ul>\n<li>Percebemos que:</li>\n</ul>\n<p>a = e</p>\n<p>b = (p - 1)(q - 1)</p>\n<p>c = 1</p>\n<ul>\n<li>Portanto, podemos escrever nossa equação como:</li>\n</ul>\n<p>ex + (p - 1)(q - 1)y = gcd(e, (p - 1)(q - 1)) = 1</p>\n<ul>\n<li>\n<p>E descobrimos os valores de x e de y aplicando o algoritmo estendido de Euclides.</p>\n</li>\n<li>\n<p>O exercício nos garante que encontraremos uma solução para o problema, então não precisamos nos preocupar com isso.</p>\n</li>\n<li>\n<p>3ª Etapa: definir os valores para p e q</p>\n<ul>\n<li>Os valores de p e q não estão definidos para aplicarmos na equação que obtemos, porém sabemos que n = p * q.</li>\n<li>Assim, testamos valores de p e q da seguinte maneira:</li>\n</ul>\n<ol>\n<li>Dado um número p, verificamos se p é primo.</li>\n<li>Se p é primo, verificamos se a divisão n / p é inteira por meio da expressão n % p == 0.</li>\n<li>Se a divisão for inteira, verificamos se o valor q = n / p também é primo.</li>\n<li>Se todos os itens anteriores forem verdadeiros, encontramos p e q.</li>\n</ol>\n</li>\n<li>\n<p>Cuidados:</p>\n</li>\n<li>\n<p>x pode ser um valor negativo na resolução da equação diofantina, pois se uma solução é possível, elas admitem infinitas soluções.</p>\n</li>\n<li>\n<p>Porém, temos que:</p>\n</li>\n</ul>\n<p>e &#x3C; (p - 1)(q - 1) (I)</p>\n<p>ex = 1 -> e = 1 / x (II)</p>\n<ul>\n<li>Para garantir I, podemos reescrever II como:</li>\n</ul>\n<p>e (mod (p - 1)(q - 1)) * x = 1</p>\n<ul>\n<li>Aplicando propriedades da álgebra modular, obtemos:</li>\n</ul>\n<p>ex (mod (p - 1)(q - 1)) = 1 (mod (p - 1)(q - 1))</p>\n<ul>\n<li>Assim, e levando em consideração que x é a multiplicativa inversa de e, podemos concluir que:</li>\n</ul>\n<p>e, x &#x3C; (p - 1)(q - 1) = mod</p>\n<p>Se x &#x3C; 0, x = (x % mod + mod) % mod</p>\n<p>Senão, x = x % mod</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> is_prime<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> primes<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">crivo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    is_prime <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is_prime<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> is_prime<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_prime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                is_prime<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is_prime<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            primes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">crivo</span><span class=\"token punctuation\">(</span><span class=\"token number\">32000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> e<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> e <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        p <span class=\"token operator\">=</span> primes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> p <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> is_prime<span class=\"token punctuation\">[</span>n <span class=\"token operator\">/</span> p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            q <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> p<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> mod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">extended_gcd</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> mod<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> mod <span class=\"token operator\">+</span> mod<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">pow_mod</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nll <span class=\"token function\">pow_mod</span><span class=\"token punctuation\">(</span>ll b<span class=\"token punctuation\">,</span> ll x<span class=\"token punctuation\">,</span> ll mod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ll m <span class=\"token operator\">=</span> <span class=\"token number\">1LL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>F - DDF</h3>\n<ul>\n<li>\n<p>É dado o início e o fim de um intervalo</p>\n</li>\n<li>\n<p>O objetivo é saber qual o número com a maior sequência DDF nesse intervalo.</p>\n</li>\n<li>\n<p>DDF -> Decimal Digit Factor Sequence</p>\n</li>\n<li>\n<p>Confira na GIF abaixo:</p>\n</li>\n</ul>\n<p><img src=\"/static/gif1-dd79a2ce8655280e88abdb2b2008a5ff.gif\" alt=\"img1-img4\"></p>\n<ul>\n<li>Objetivo: Encontrar a maior DDF no intervalo dado.</li>\n<li>Como o intervalo vai de 1 a 3000 no máximo e o tamanho de uma DDF é no máximo 1000, pode-se calcular todas as DDFs, de maneira offline, e pegar a maior.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\">ll <span class=\"token function\">soma_digitos</span><span class=\"token punctuation\">(</span>ll num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> num<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        num<span class=\"token operator\">/=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nll <span class=\"token function\">fatorar</span><span class=\"token punctuation\">(</span>ll n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span> fator<span class=\"token punctuation\">;</span>\n    ll soma <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> i<span class=\"token operator\">*</span>i<span class=\"token punctuation\">)</span>soma <span class=\"token operator\">+=</span> <span class=\"token function\">soma_digitos</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            soma <span class=\"token operator\">+=</span> <span class=\"token function\">soma_digitos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> soma<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nvector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span> ddf <span class=\"token punctuation\">[</span><span class=\"token number\">3001</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ll ant <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    ddf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> <span class=\"token function\">fatorar</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ant <span class=\"token operator\">==</span> res<span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        ddf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ant <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>"}},"pageContext":{"id":"8d0c9837-5705-538d-b416-b8a7a181d95a","frontmatter__slug":"exercicios-xiii","__params":{"frontmatter__slug":"exercicios-xiii"}}},"staticQueryHashes":["3159585216"],"slicesMap":{}}