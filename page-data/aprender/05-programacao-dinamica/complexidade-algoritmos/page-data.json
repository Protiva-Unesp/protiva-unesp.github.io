{"componentChunkName":"component---src-pages-aprender-05-programacao-dinamica-markdown-remark-frontmatter-slug-tsx","path":"/aprender/05-programacao-dinamica/complexidade-algoritmos/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"04 - Complexidade de Algoritmos","description":"Tipos de algoritmos e sua eficiência","author":"Pedro Henrique Paiola, Rene Pegoraro, Wilson M. Yonezawa"},"html":"<h3 id=\"introdução\" style=\"position:relative;\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-label=\"introdução permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introdução</h3>\n<ul>\n<li>O que é um algoritmo?</li>\n<li>Objetivo: Encontrar e/ou projetar algoritmos eficientes para problemas computacionais</li>\n<li>Como projetar e avaliar um algoritmo? “Informalmente, um algoritmo é qualquer procedimento computacional bem definido que recebe algum valor, ou conjunto de valores, como entrada e produz algum valor, ou conjunto de valores, como saída. Um algoritmo é, portanto, uma sequência de passos computacionais que transformam a entrada na saída”. Tradução livre do livro “Introduction to Algorithms do Cormen, Leiserson, Rivest e Stein, 2009.</li>\n</ul>\n<p>Algoritmo (exemplo de representação)\nmdc(a, b)</p>\n<ul>\n<li>Etapa 1: Dados dos números inteiros a e b</li>\n<li>Etapa 2: R é o resto da divisão de a por b</li>\n<li>Etapa 3: Faça a = b e b = R</li>\n<li>Etapa 4: Repita as etapas 2 e 3 enquanto o</li>\n<li>resto de a dividido por b for maior que zero</li>\n<li>Etapa 5: mdc = b</li>\n<li>Etapa 6: Fim</li>\n</ul>\n<h2 id=\"eficiência-de-um-algoritmo\" style=\"position:relative;\"><a href=\"#efici%C3%AAncia-de-um-algoritmo\" aria-label=\"eficiência de um algoritmo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eficiência de um algoritmo</h2>\n<ul>\n<li>Tempo (de execução) e espaço (memória)</li>\n<li>Tempo de execução pode variar dependendo do computador</li>\n<li>Comportamento do algoritmo em função do tamanho da entrada de dados (n</li>\n</ul>\n<h2 id=\"exemplos-de-problemas\" style=\"position:relative;\"><a href=\"#exemplos-de-problemas\" aria-label=\"exemplos de problemas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exemplos de problemas</h2>\n<ul>\n<li>Encontrar o maior elemento de uma lista de tamanho N</li>\n<li>Mostrar todos os pares ordenados de uma lista de tamanho N</li>\n<li>Ordenar uma lista com N números inteiros</li>\n<li>Encontrar um elemento em uma lista ordenada de tamanho N</li>\n<li>Permutar as letras de uma string de tamanho N</li>\n<li>3-SAT, problema do caixeiro viajante, etc</li>\n</ul>\n<h2 id=\"big-o\" style=\"position:relative;\"><a href=\"#big-o\" aria-label=\"big o permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Big O</h2>\n<p>A notação Big O descreve a complexidade de uma função/algoritmo, seja seu tempo de execução (a quantidade de tempo que um algoritmo leva para completar sua tarefa) ou a complexidade do espaço (a quantidade de espaço que um algoritmo usa). É usado para ver quanto mais trabalho precisa ser feito por um algoritmo quando a entrada aumenta</p>\n<table>\n<thead>\n<tr>\n<th>Complexidade do algoritmo</th>\n<th>Terminologia</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>O(1)</td>\n<td>Complexidade constante</td>\n</tr>\n<tr>\n<td>O(log n)</td>\n<td>Complexidade logarítmica</td>\n</tr>\n<tr>\n<td>O(n)</td>\n<td>Complexidade linear</td>\n</tr>\n<tr>\n<td>O(n log n)</td>\n<td>Complexidade n log n</td>\n</tr>\n<tr>\n<td>O(n^b)</td>\n<td>Complexidade polinomial</td>\n</tr>\n<tr>\n<td>O(b^n ), b > 1</td>\n<td>Complexidade exponencial</td>\n</tr>\n<tr>\n<td>O(n!)</td>\n<td>Complexidade fatorial</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"voltando-aos-exemplos\" style=\"position:relative;\"><a href=\"#voltando-aos-exemplos\" aria-label=\"voltando aos exemplos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Voltando aos Exemplos</h3>\n<ul>\n<li>O(n) - Encontrar o maior elemento de uma lista de tamanho N</li>\n<li>O(n^2) - Mostrar todos os pares ordenados de uma lista de tamanho N</li>\n<li>O (log n) - Encontrar um elemento em uma lista ordenada de tamanho N</li>\n<li>O(n log n) - Ordenar uma lista com N números inteiros</li>\n<li>O(k^n) - 3-SAT, problema do caixeiro viajante, etc</li>\n<li>O(n!) - Permutar as letras de uma string de tamanho N</li>\n</ul>\n<h3 id=\"voltando-aos-algoritmos\" style=\"position:relative;\"><a href=\"#voltando-aos-algoritmos\" aria-label=\"voltando aos algoritmos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Voltando aos Algoritmos</h3>\n<h4 id=\"mdca-b\" style=\"position:relative;\"><a href=\"#mdca-b\" aria-label=\"mdca b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mdc(a, b)</h4>\n<p>Etapa 1: Dados dos números inteiros a e b\nEtapa 2: R é o resto da divisão de a por b\nEtapa 3: Faça a = b e b = R\nEtapa 4: Repita as etapas 2 e 3 enquanto o\nresto de a dividido por b for maior que zero\nEtapa 5: mdc = b\nEtapa 6: Fim</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">mdc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        R <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n        a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> R<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"considerações-finais\" style=\"position:relative;\"><a href=\"#considera%C3%A7%C3%B5es-finais\" aria-label=\"considerações finais permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considerações finais</h3>\n<ul>\n<li>Observar o problema e o tamanho da entrada (N)</li>\n<li>Procurar e/ou buscar projetar algoritmos com complexidade:</li>\n</ul>\n<p>logarítmica O(log N), linear O(n), linear/logarítmica O(n log n),\npolinomial O(n k ).</p>\n<ul>\n<li>Se a complexidade do problema é do tipo exponencial ou fatorial,</li>\n</ul>\n<p>verificar se é possível reduzir para polinomial.\nProblemas recursivos devem ser analisados com cuidado visto que,\ngeralmente, aumentam a complexidade do algoritmo.</p>"}},"pageContext":{"id":"bb226f00-e0bb-59e7-87eb-8b0e10c63e8b","frontmatter__slug":"complexidade-algoritmos","__params":{"frontmatter__slug":"complexidade-algoritmos"}}},"staticQueryHashes":["3159585216"],"slicesMap":{}}